_3asyD.shaders={flat:function(){this.vertex={attributePosition:"attribute vec3 position;\n",attributeColor:"attribute vec3 color;\n",attributeNormal:"attribute vec3 normal;\n",uniformPMatrix:"uniform mat4 pMatrix;\n",uniformVMatrix:"uniform mat4 vMatrix;\n",uniformMMatrix:"uniform mat4 mMatrix;\n",varyingColor:"varying vec3 vColor;\n",varyingNormal:"varying vec3 vNormal;\n",main:"void main(void) {\n				vColor = color;\n				vNormal = vec3(mMatrix*vec4(normal,0));\n				gl_Position = pMatrix*vMatrix*mMatrix*vec4(position,1.0);\n			}",sourceCode:function(){var i=this.vertex;i.attributePosition+i.attributeColor+i.attributeNormal+i.uniformPMatrix+i.uniformVMatrix+i.uniformMMatrix+i.varyingColor+i.varyingNormal+i.main}},this.fragment={precision:"precision mediump float;\n",varyingColor:"varying vec3 vColor;\n",varyingNormal:"varying vec3 vNormal;\n",uniformSourceAmbient:"uniform vec3 SOURCE_AMBIENT;\n",uniformSourceDiffuse:"uniform vec3 SOURCE_DIFFUSE;\n",uniformSourceDirection:"uniform vec3 SOURCE_DIRECTION;\n",uniformMaterialAmbient:"uniform vec3 MATERIAL_AMBIENT;\n",uniformMaterialDiffuse:"uniform vec3 MATERIAL_DIFFUSE;\n",main:"void main(void) {\n				vec3 I_ambient = SOURCE_AMBIENT*MATERIAL_AMBIENT;\n				vec3 L = normalize(SOURCE_DIRECTION);\n				vec3 I_diffuse = max(0,dot(vNoraml,L))*(MATERIAL_DIFFUSE*SOURCE_DIFFUSE)*10.0;\n				vec3 I = I_ambient+I_diffuse;\n				gl_FragColor = vec4(I*vColor,1.0);\n			}",sourceCode:function(){var i=this.fragment;return i.precision+i.varyingColor+i.varyingNormal+i.uniformSourceAmbient+i.uniformSourceDiffuse+i.uniformSourceDirection+i.uniformMaterialDiffuse+i.uniformMaterialAmbient+i.main}}},phong:function(){this.vertex={attributePosition:"attribute vec3 position;\n",attributeColor:"attribute vec3 color;\n",attributeNormal:"attribute vec3 normal;\n",uniformPMatrix:"uniform mat4 pMatrix;\n",uniformVMatrix:"uniform mat4 vMatrix;\n",uniformMMatrix:"uniform mat4 mMatrix;\n",varyingColor:"varying vec3 vColor;\n",varyingNormal:"varying vec3 vNormal;\n",varyingView:"varying vec3 vView;\n",main:"void main(void) {\n				vNorm = vec3(mMatrix*vec4(normal,0));\n				gl_Position = pMatrix*vMatrix*mMatrix*vec4(position,1.0);\n				vView = vec3(vMatrix*mMatrix*vec4(position,1));\n				vColor = color;\n			",sourceCode:function(){var i=this.vertex;return i.attributePosition+i.attributeColor+i.attributeNormal+i.uniformPMatrix+i.uniformVMatrix+i.uniformMMatrix+i.varyingColor+i.varyingNormal+i.varyingView+i.main}},this.fragment={precision:"precision mediump float;\n",varyingColor:"varying vec3 vColor;\n",varyingNormal:"varying vec3 vNorm;\n",varyingView:"varying vec3 vView;\n",uniformSourceAmbient:"uniform vec3 SOURCE_AMBIENT;\n",uniformSourceDiffuse:"uniform vec3 SOURCE_DIFFUSE;\n",uniformSourceSpecular:"uniform vec3 SOURCE_SPECULAR;\n",uniformSourceDirection:"uniform vec3 SOURCE_DIRECTION;\n",uniformMaterialAmbient:"uniform vec3 MATERIAL_AMBIENT;\n",uniformMaterialDiffuse:"uniform vec3 MATERIAL_DIFFUSE;\n",uniformMaterialSpecular:"uniform vec3 MATERIAL_SPECULAR;\n",uniformGloss:"uniform float GLOSS;\n",main:"void main(void) {\n				vec3 I_ambient = SOURCE_AMBIENT*MATERIAL_AMBIENT;\n				vec3 V = normalize(vView);\n				vec3 L = normalize(SOURCE_DIRECTION);\n				vec3 I_diffuse = max(0.0,dot(vNorm,L))*(MATERIAL_DIFFUSE*SOURCE_DIFFUSE)*10.0;\n				vec3 R = reflect(SOURCE_DIRECTION,vNorm);\n				vec3 I_specular = SOURCE_SPECULAR*MATERIAL_SPECULAR*pow(max(dot(R,V),0.),GLOSS);\n				vec3 I = I_ambient+I_diffuse+I_specular;\n				gl_FragColor = vec4(I*vColor,1.);\n			",sourceCode:function(){var i=this.fragment;return i.precsion+i.varyingColor+i.varyingNormal+i.varyingView+i.uniformSourceAmbient+i.uniformSourceDiffuse+i.uniformSourceDirection+i.uniformMaterialAmbient+i.uniformMaterialDiffuse+i.uniformMaterialSpecular+i.uniformGloss+i.main}}}};